name: Build Container, Deploy and Automate Testing
run-name: ${{ github.actor }} is testing matrix multiplication inside a Docker container...

on: 
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build-and-push-docker-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "The job is running on a ${{ runner.os }} server hosted by GitHub."

      - uses: actions/checkout@v4
        with:
            submodules: recursive


      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}


      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}


      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true



  run-docker-container-test:
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest
    # container:
    #   image:  ghcr.io/fdallac/hpc-devops-exercise-part2:main #${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
    #   credentials:
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}
      
    steps:

      - name: Run docker image
        uses: addnab/docker-run-action@v3
        with:
          image: ghcr.io/fdallac/hpc-devops-exercise-part2:main
          run: echo "hello world"


  # run-docker-container-to-test:
  #   needs: build-and-push-docker-image
  #   runs-on: ubuntu-latest
  #   container:
  #     image:  ghcr.io/fdallac/hpc-devops-exercise-part2:main #${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
  #     credentials:
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}
      
  #   steps:

  #     - run: echo "Hello world"
  #     - run: ls




      # - name: Check if Singularity Recipe Exists
      #   run: |
      #     if [[ -f "${{ matrix.recipe }}" ]]; then
      #       echo "keepgoing=true" >> $GITHUB_ENV
      #     fi  


      # - name: Build Container
      #   if: ${{ env.keepgoing == 'true' }}
      #   env:
      #       recipe: ${{ matrix.recipe }}
      #   run: |
      #     ls 
      #     if [ -f "${{ matrix.recipe }}" ]; then
      #       singularity build matrix-mult.sif ${{ matrix.recipe }}
      #       tag=$(echo "${recipe/Singularity\./}")
      #       if [ "$tag" == "Singularity" ]; then
      #           tag=latest
      #       fi
      #       # Build the container and name by tag
      #       echo "Tag is $tag."
      #       echo "tag=$tag" >> $GITHUB_ENV
      #     else
      #       echo "${{ matrix.recipe }} is not found."
      #       echo "Present working directory: $PWD"
      #       ls
      #     fi


      # - name: Login and Deploy Container
      #   env:
      #     keepgoing: ${{ env.keepgoing }}
      #   run: |
      #       if [[ "${keepgoing}" == "true" ]]; then
      #           echo ${{ secrets.GITHUB_TOKEN }} | singularity remote login -u ${{ github.actor }} --password-stdin docker://ghcr.io 
      #           singularity push matrix-mult.sif docker://ghcr.io/${GITHUB_REPOSITORY}:${tag}
      #       fi

    
      # - name: Setup CMake
      #   uses: jwlawson/actions-setup-cmake@v1
      # - name: Setup MPI
      #   uses: mpi4py/setup-mpi@v1
      # - name: Create folder
      #   run: mkdir -p build
      # - name: Configure CMake
      #   run: cmake -B ${{ github.workspace }}/build
      # - name: CMake build
      #   run: cmake --build ${{ github.workspace }}/build
      # - name: Run unit tests
      #   working-directory: ${{ github.workspace }}/build
      #   run: ./test_multiplication
      #