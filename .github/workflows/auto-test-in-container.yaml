name: Automated testing on push by Github Actions
run-name: ${{ github.actor }} is testing matrix multiplication inside a container...
on: 
  push:
    branches:
      - main
jobs:
  build-test-container-on-push:
    runs-on: ubuntu-latest
    container:
      image: quay.io/singularity/singularity:v3.8.3
    strategy:
      fail-fast: false
      matrix:
        recipe: ["Singularity"]


    steps:
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "The job is running on a ${{ runner.os }} server hosted by GitHub."
      - uses: actions/checkout@v2
        with:
            submodules: recursive


      - name: Check if Singularity Recipe Exists
        run: |
          if [[ -f "${{ matrix.recipe }}" ]]; then
            echo "keepgoing=true" >> $GITHUB_ENV
          fi  


      - name: Build Container
        if: ${{ env.keepgoing == 'true' }}
        env:
            recipe: ${{ matrix.recipe }}
        run: |
          ls 
          if [ -f "${{ matrix.recipe }}" ]; then
            sudo -E singularity build container.sif ${{ matrix.recipe }}
            tag=$(echo "${recipe/Singularity\./}")
            if [ "$tag" == "Singularity" ]; then
                tag=latest
            fi
            # Build the container and name by tag
            echo "Tag is $tag."
            echo "tag=$tag" >> $GITHUB_ENV
          else
            echo "${{ matrix.recipe }} is not found."
            echo "Present working directory: $PWD"
            ls
          fi


      - name: Login and Deploy Container
        env:
          keepgoing: ${{ env.keepgoing }}
        run: |
            if [[ "${keepgoing}" == "true" ]]; then
                echo ${{ secrets.GITHUB_TOKEN }} | singularity remote login -u ${{ secrets.GHCR_USERNAME }} --password-stdin oras://ghcr.io
                singularity push container.sif oras://ghcr.io/${GITHUB_REPOSITORY}:${tag}
            fi

    
      # - name: Setup CMake
      #   uses: jwlawson/actions-setup-cmake@v1
      # - name: Setup MPI
      #   uses: mpi4py/setup-mpi@v1
      # - name: Create folder
      #   run: mkdir -p build
      # - name: Configure CMake
      #   run: cmake -B ${{ github.workspace }}/build
      # - name: CMake build
      #   run: cmake --build ${{ github.workspace }}/build
      # - name: Run unit tests
      #   working-directory: ${{ github.workspace }}/build
      #   run: ./test_multiplication
      #